BasisDirectory[gr1] = StringDrop[DirectoryName[$Input], -1]
gr1 /: BasisSectors[gr1] := {}
gr1 /: CurrentState[gr1] := <|NewDsBasis -> True, GenerateIBP -> True, 
   AnalyzeSectors -> True, FindSymmetries -> False|>
gr1 /: CutDs[gr1] := {0, 0, 0, 0}
gr1 /: Definitions[gr1] := {Hold[MetricTensor[] === dm1, SetDim[dm1]], 
   Hold[VecQ[l], Declare[l, Vector]], Hold[VecQ[q1], Declare[q1, Vector]], 
   Hold[VecQ[q2], Declare[q2, Vector]], Hold[VecQ[v1], Declare[v1, Vector]], 
   Hold[VecQ[v2], Declare[v2, Vector]], Hold[TypeOf[q1] === Vector, 
    Declare[q1, Vector]], Hold[TypeOf[q2] === Vector, Declare[q2, Vector]], 
   Hold[TypeOf[qq1] === Numbers, Declare[qq1, Numbers]], 
   Hold[TypeOf[qq2] === Numbers, Declare[qq2, Numbers]], 
   Hold[TypeOf[v1] === Vector, Declare[v1, Vector]], 
   Hold[TypeOf[v2] === Vector, Declare[v2, Vector]], 
   Hold[TypeOf[w1] === Numbers, Declare[w1, Numbers]], 
   Hold[TypeOf[w2] === Numbers, Declare[w2, Numbers]], 
   Hold[TypeOf[y] === Numbers, Declare[y, Numbers]], 
   Hold[sp[q1, q1] === -qq1, sp[q1, q1] = -qq1], Hold[sp[q2, q2] === -qq2, 
    sp[q2, q2] = -qq2], Hold[sp[v1, v1] === 1, sp[v1, v1] = 1], 
   Hold[sp[v2, v2] === -1 + y^2, sp[v2, v2] = -1 + y^2], 
   Hold[sp[q1, q2] === (qq1 + qq2)/2, sp[q1, q2] = (qq1 + qq2)/2], 
   Hold[sp[q1, v1] === 0, sp[q1, v1] = 0], Hold[sp[q1, v2] === w2, 
    sp[q1, v2] = w2], Hold[sp[q2, v1] === w1, sp[q2, v1] = w1], 
   Hold[sp[q2, v2] === 0, sp[q2, v2] = 0], Hold[sp[v1, v2] === y, 
    sp[v1, v2] = y]}
gr1 /: Ds[gr1] := {sp[l, l], sp[l, v1], sp[-l - q1, -l - q1], 
   sp[-l + q2, -l + q2], sp[l, v2]}
gr1 /: DsBasisQ[gr1] := True
gr1 /: EMs[gr1] := {q1, q2, v1, v2}
gr1 /: ExtMappedSectors[gr1] := {}
gr1 /: ExtSectorsMappings[gr1] := {}
gr1 /: IBP[gr1] := {-(#4*j[gr1, -1 + #1, #2, #3, 1 + #4, #5]) - 
     #3*j[gr1, -1 + #1, #2, 1 + #3, #4, #5] + 
     (dm1 - 2*#1 - #2 - #3 - #4 - #5)*j[gr1, #1, #2, #3, #4, #5] - 
     #4*qq2*j[gr1, #1, #2, #3, 1 + #4, #5] - 
     #3*qq1*j[gr1, #1, #2, 1 + #3, #4, #5], 
    #4*j[gr1, -1 + #1, #2, #3, 1 + #4, #5] + 
     #3*j[gr1, -1 + #1, #2, 1 + #3, #4, #5] - 
     #4*j[gr1, #1, #2, -1 + #3, 1 + #4, #5] + 
     (#1 - #3)*j[gr1, #1, #2, #3, #4, #5] - 
     #5*w2*j[gr1, #1, #2, #3, #4, 1 + #5] + 
     #4*qq2*j[gr1, #1, #2, #3, 1 + #4, #5] + 
     #3*qq1*j[gr1, #1, #2, 1 + #3, #4, #5] - 
     #1*j[gr1, 1 + #1, #2, -1 + #3, #4, #5] - 
     #1*qq1*j[gr1, 1 + #1, #2, #3, #4, #5], 
    -(#4*j[gr1, -1 + #1, #2, #3, 1 + #4, #5]) - 
     #3*j[gr1, -1 + #1, #2, 1 + #3, #4, #5] + 
     (-#1 + #4)*j[gr1, #1, #2, #3, #4, #5] - 
     #4*qq2*j[gr1, #1, #2, #3, 1 + #4, #5] + 
     #3*j[gr1, #1, #2, 1 + #3, -1 + #4, #5] - 
     #3*qq1*j[gr1, #1, #2, 1 + #3, #4, #5] - 
     #2*w1*j[gr1, #1, 1 + #2, #3, #4, #5] + 
     #1*j[gr1, 1 + #1, #2, #3, -1 + #4, #5] + 
     #1*qq2*j[gr1, 1 + #1, #2, #3, #4, #5], 
    -2*#4*j[gr1, #1, -1 + #2, #3, 1 + #4, #5] - 
     2*#3*j[gr1, #1, -1 + #2, 1 + #3, #4, #5] - 
     #5*y*j[gr1, #1, #2, #3, #4, 1 + #5] + 
     2*#4*w1*j[gr1, #1, #2, #3, 1 + #4, #5] - 
     #2*j[gr1, #1, 1 + #2, #3, #4, #5] - 2*#1*j[gr1, 1 + #1, -1 + #2, #3, #4, 
       #5], -(#5*(-1 + y)*(1 + y)*j[gr1, #1, #2, #3, #4, 1 + #5]) - 
     2*#4*j[gr1, #1, #2, #3, 1 + #4, -1 + #5] - 
     2*#3*j[gr1, #1, #2, 1 + #3, #4, -1 + #5] - 
     2*#3*w2*j[gr1, #1, #2, 1 + #3, #4, #5] - 
     #2*y*j[gr1, #1, 1 + #2, #3, #4, #5] - 
     2*#1*j[gr1, 1 + #1, #2, #3, #4, -1 + #5]} & 
gr1 /: Information[gr1] := (If[ValueQ[gr1::usage], 
    Information[gr1, LongForm -> False]]; 
   Print[Grid[Partition[Union[Replace[Replace[First /@ UpValues[gr1] /. 
          HoldPattern -> HoldForm, 
         {HoldPattern[HoldForm[(LiteRed`Private`f$_)[gr1, __]]] :> 
           HoldForm[LiteRed`Private`f$[gr1, "\[Ellipsis]"]]}, {1}], 
        {HoldPattern[LiteRed`Private`x$:HoldForm[(LiteRed`Private`f$_)[gr1, 
              ___]]] :> Button[LiteRed`Private`x$, 
           (SelectionMove[ButtonNotebook[], All, GeneratedCell]; 
             NotebookDelete[]; Information[Evaluate[LiteRed`Private`x$[[1,
                0]]], LongForm -> False]; Print[TableForm[Cases[UpValues[
                  gr1], HoldPattern[LiteRed`Private`a$_ :> 
                    LiteRed`Private`b$_] /; MatchQ[LiteRed`Private`a$[[1,0]], 
                   LiteRed`Private`x$[[1,0]]]] /. HoldPattern -> 
                 HoldForm]]) & , Appearance -> "Frameless", 
           BaseStyle -> "InformationLink"]}, {1}]], 5], 
     DefaultBaseStyle -> "InfoGrid"]])
gr1 /: jsOrder[gr1] := {"np", "cp", "-ds", "-ns"}
gr1 /: LI[gr1] := {-1/2*(#5*w2*j[gr1, -1 + #1, #2, #3, #4, 1 + #5]) + 
     (#4*(qq1 - qq2)*j[gr1, -1 + #1, #2, #3, 1 + #4, #5])/2 + 
     (#3*(qq1 - qq2)*j[gr1, -1 + #1, #2, 1 + #3, #4, #5])/2 - 
     (#2*w1*j[gr1, -1 + #1, 1 + #2, #3, #4, #5])/2 + 
     #4*qq2*j[gr1, #1, #2, -1 + #3, 1 + #4, #5] + 
     (#5*w2*j[gr1, #1, #2, #3, -1 + #4, 1 + #5])/2 + 
     ((#3 - #4)*(qq1 + qq2)*j[gr1, #1, #2, #3, #4, #5])/2 + 
     (#5*qq2*w2*j[gr1, #1, #2, #3, #4, 1 + #5])/2 + 
     (#4*(qq1 - qq2)*qq2*j[gr1, #1, #2, #3, 1 + #4, #5])/2 - 
     #3*qq1*j[gr1, #1, #2, 1 + #3, -1 + #4, #5] + 
     (#3*qq1*(qq1 - qq2)*j[gr1, #1, #2, 1 + #3, #4, #5])/2 + 
     (#2*w1*j[gr1, #1, 1 + #2, -1 + #3, #4, #5])/2 + 
     (#2*qq1*w1*j[gr1, #1, 1 + #2, #3, #4, #5])/2, 
    -1/2*(#5*y*j[gr1, -1 + #1, #2, #3, #4, 1 + #5]) + 
     #4*w1*j[gr1, -1 + #1, #2, #3, 1 + #4, #5] - 
     (#2*j[gr1, -1 + #1, 1 + #2, #3, #4, #5])/2 - 
     #5*w2*j[gr1, #1, -1 + #2, #3, #4, 1 + #5] + 
     #4*(qq1 + qq2)*j[gr1, #1, -1 + #2, #3, 1 + #4, #5] + 
     2*#3*qq1*j[gr1, #1, -1 + #2, 1 + #3, #4, #5] + 
     (#5*y*j[gr1, #1, #2, -1 + #3, #4, 1 + #5])/2 - 
     #4*w1*j[gr1, #1, #2, -1 + #3, 1 + #4, #5] + 
     (#5*qq1*y*j[gr1, #1, #2, #3, #4, 1 + #5])/2 - 
     #4*qq1*w1*j[gr1, #1, #2, #3, 1 + #4, #5] + 
     (#2*j[gr1, #1, 1 + #2, -1 + #3, #4, #5])/2 + 
     (#2*qq1*j[gr1, #1, 1 + #2, #3, #4, #5])/2, 
    -1/2*(#5*(-1 + y)*(1 + y)*j[gr1, -1 + #1, #2, #3, #4, 1 + #5]) - 
     #3*w2*j[gr1, -1 + #1, #2, 1 + #3, #4, #5] - 
     (#2*y*j[gr1, -1 + #1, 1 + #2, #3, #4, #5])/2 + 
     (#5*(-1 + y)*(1 + y)*j[gr1, #1, #2, -1 + #3, #4, 1 + #5])/2 + 
     (#3 - #5)*w2*j[gr1, #1, #2, #3, #4, #5] + 
     (#5*qq1*(-1 + y)*(1 + y)*j[gr1, #1, #2, #3, #4, 1 + #5])/2 + 
     #4*(qq1 + qq2)*j[gr1, #1, #2, #3, 1 + #4, -1 + #5] + 
     2*#3*qq1*j[gr1, #1, #2, 1 + #3, #4, -1 + #5] + 
     #3*qq1*w2*j[gr1, #1, #2, 1 + #3, #4, #5] + 
     (#2*y*j[gr1, #1, 1 + #2, -1 + #3, #4, #5])/2 + 
     (#2*qq1*y*j[gr1, #1, 1 + #2, #3, #4, #5])/2, 
    (#5*y*j[gr1, -1 + #1, #2, #3, #4, 1 + #5])/2 - 
     #4*w1*j[gr1, -1 + #1, #2, #3, 1 + #4, #5] + 
     (#2*j[gr1, -1 + #1, 1 + #2, #3, #4, #5])/2 - 
     2*#4*qq2*j[gr1, #1, -1 + #2, #3, 1 + #4, #5] - 
     #3*(qq1 + qq2)*j[gr1, #1, -1 + #2, 1 + #3, #4, #5] - 
     (#5*y*j[gr1, #1, #2, #3, -1 + #4, 1 + #5])/2 - 
     (#2 - #4)*w1*j[gr1, #1, #2, #3, #4, #5] - 
     (#5*qq2*y*j[gr1, #1, #2, #3, #4, 1 + #5])/2 + 
     #4*qq2*w1*j[gr1, #1, #2, #3, 1 + #4, #5] - 
     (#2*j[gr1, #1, 1 + #2, #3, -1 + #4, #5])/2 - 
     (#2*qq2*j[gr1, #1, 1 + #2, #3, #4, #5])/2, 
    (#5*(-1 + y)*(1 + y)*j[gr1, -1 + #1, #2, #3, #4, 1 + #5])/2 + 
     #3*w2*j[gr1, -1 + #1, #2, 1 + #3, #4, #5] + 
     (#2*y*j[gr1, -1 + #1, 1 + #2, #3, #4, #5])/2 - 
     (#5*(-1 + y)*(1 + y)*j[gr1, #1, #2, #3, -1 + #4, 1 + #5])/2 - 
     (#5*qq2*(-1 + y)*(1 + y)*j[gr1, #1, #2, #3, #4, 1 + #5])/2 - 
     2*#4*qq2*j[gr1, #1, #2, #3, 1 + #4, -1 + #5] - 
     #3*w2*j[gr1, #1, #2, 1 + #3, -1 + #4, #5] - 
     #3*(qq1 + qq2)*j[gr1, #1, #2, 1 + #3, #4, -1 + #5] - 
     #3*qq2*w2*j[gr1, #1, #2, 1 + #3, #4, #5] - 
     (#2*y*j[gr1, #1, 1 + #2, #3, -1 + #4, #5])/2 - 
     #2*w1*j[gr1, #1, 1 + #2, #3, #4, -1 + #5] - 
     (#2*qq2*y*j[gr1, #1, 1 + #2, #3, #4, #5])/2, 
    #5*(-1 + y)*(1 + y)*j[gr1, #1, -1 + #2, #3, #4, 1 + #5] + 
     2*#3*w2*j[gr1, #1, -1 + #2, 1 + #3, #4, #5] + 
     (#2 - #5)*y*j[gr1, #1, #2, #3, #4, #5] + 
     2*#4*w1*j[gr1, #1, #2, #3, 1 + #4, -1 + #5] - 
     #2*j[gr1, #1, 1 + #2, #3, #4, -1 + #5]} & 
gr1 /: LMs[gr1] := {l}
gr1 /: MappedSectors[gr1] := {}
gr1 /: MIs[gr1] := Get[StringJoin[BasisDirectory[gr1], "/MIs[gr1]"]]
gr1 /: NDs[gr1] := 5
gr1 /: NonZeroSectors[gr1] := {}
gr1 /: Parameters[gr1] := {dm1, qq1, qq2, w1, w2, y}
gr1 /: PowerShifts[gr1] := {0, 0, 0, 0, 0}
gr1 /: SectorsMappings[gr1] := {}
gr1 /: SectorsPattern[gr1] := {___}
gr1 /: SimpleSectors[gr1] := {}
gr1 /: SPs[gr1] := {sp[l, l], sp[l, q1], sp[l, q2], sp[l, v1], sp[l, v2]}
gr1 /: SR[gr1] := Get[StringJoin[BasisDirectory[gr1], "/SR[gr1]"]]
gr1 /: Toj[gr1] := {sp[l, l] -> j[gr1, -1, 0, 0, 0, 0], 
   sp[l, q1] -> (qq1 - j[gr1, -1, 0, 0, 0, 0] + j[gr1, 0, 0, -1, 0, 0])/2, 
   sp[l, q2] -> (-qq2 + j[gr1, -1, 0, 0, 0, 0] - j[gr1, 0, 0, 0, -1, 0])/2, 
   sp[l, v1] -> j[gr1, 0, -1, 0, 0, 0], sp[l, v2] -> j[gr1, 0, 0, 0, 0, -1]}
gr1 /: UniqueSectors[gr1] := {}
gr1 /: ZerojRule[gr1] := LiteRed`Private`jjj:j[gr1, __] :> 
   0 /; Module[{LiteRed`Private`jjs = 
       Rest[List @@ jSector[LiteRed`Private`jjj]]}, 
     Or @@ (BitOr[LiteRed`Private`jjs, #1] === #1 & ) /@ {{1, 1, 1, 1, 1}}]
gr1 /: ZeroSectors[gr1] := {js[gr1, 0, 0, 0, 0, 0], js[gr1, 0, 0, 0, 0, 1], 
   js[gr1, 0, 0, 0, 1, 0], js[gr1, 0, 0, 1, 0, 0], js[gr1, 0, 1, 0, 0, 0], 
   js[gr1, 1, 0, 0, 0, 0], js[gr1, 0, 0, 0, 1, 1], js[gr1, 0, 0, 1, 0, 1], 
   js[gr1, 0, 0, 1, 1, 0], js[gr1, 0, 1, 0, 0, 1], js[gr1, 0, 1, 0, 1, 0], 
   js[gr1, 0, 1, 1, 0, 0], js[gr1, 1, 0, 0, 0, 1], js[gr1, 1, 0, 0, 1, 0], 
   js[gr1, 1, 0, 1, 0, 0], js[gr1, 1, 1, 0, 0, 0], js[gr1, 0, 0, 1, 1, 1], 
   js[gr1, 0, 1, 0, 1, 1], js[gr1, 0, 1, 1, 0, 1], js[gr1, 0, 1, 1, 1, 0], 
   js[gr1, 1, 0, 0, 1, 1], js[gr1, 1, 0, 1, 0, 1], js[gr1, 1, 0, 1, 1, 0], 
   js[gr1, 1, 1, 0, 0, 1], js[gr1, 1, 1, 0, 1, 0], js[gr1, 1, 1, 1, 0, 0], 
   js[gr1, 0, 1, 1, 1, 1], js[gr1, 1, 0, 1, 1, 1], js[gr1, 1, 1, 0, 1, 1], 
   js[gr1, 1, 1, 1, 0, 1], js[gr1, 1, 1, 1, 1, 0], js[gr1, 1, 1, 1, 1, 1]}
gr1 /: SectorsMappings[gr1, LiteRed`Private`ns$:(0 | 1)..] := 
  Cases[SectorsMappings[gr1], HoldPattern[js[gr1, LiteRed`Private`ns$] -> _]]
gr1::usage = "1-loop basis with 4 external momenta.\nUse Information[gr1] to \
get basis summary.\nThis string can be redefined by setting \
gr1::usage=\"\[Ellipsis]\""; Information[gr1, LongForm -> False]; 
LiteRed`Private`CheckDefs[gr1]
BasisDirectory[gr1]
